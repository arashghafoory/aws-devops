AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Blue/Green Deployment with CodeDeploy

Parameters:
  ServiceName:
    Type: String
  TaskDefinitionArn:
    Type: String
    Description: ARN of existing ECS Task Definition

Resources:

  ECSServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP to ECS tasks
      VpcId: !ImportValue MyVPC-Id
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ServiceName

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ECSCodeDeployServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ServiceName}-LB
      Subnets: 
        - !ImportValue PublicSubnet1Id
        - !ImportValue PublicSubnet2Id
      SecurityGroups: [] # Add if needed
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4

  TargetGroupBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue MyVPC-Id
      Port: 80
      Protocol: HTTP
      TargetType: ip
      Name: !Sub ${ServiceName}-tg-blue
      HealthCheckPath: /api/version
      Matcher:
        HttpCode: 200

  TargetGroupGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue MyVPC-Id
      Port: 80
      Protocol: HTTP
      TargetType: ip
      Name: !Sub ${ServiceName}-tg-green
      HealthCheckPath: /api/version
      Matcher:
        HttpCode: 200

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupBlue
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  CodeDeployApp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: ECS
      ApplicationName: !Sub ${ServiceName}-App

  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeDeployECSRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForECS

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      TaskDefinition: !Ref TaskDefinitionArn
      DeploymentController:
        Type: CODE_DEPLOY
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets: 
            - !ImportValue PrivateSubnet1Id
            - !ImportValue PrivateSubnet2Id
          SecurityGroups:
            - !Ref ECSServiceSecurityGroup
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroupBlue
